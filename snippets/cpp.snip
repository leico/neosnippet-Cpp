include c.snip


#### inherit/base statement
snippet :
alias   inherit
  : ${0:#:base_class/function}


#### scope operator
snippet ::member
alias   ::, scope
abbr    scope operator
  :: ${1:#:member}${0}



#### lambda function
snippet [](){}
alias   []()
abbr    lambda function template
  [ ${1:#:capture}]( ${2:#:args}){ ${3:#:process}}${0}



#### inline prefix
snippet inline
options head
abbr    inline prefix
  inline ${1:TARGET}${0}


#### friend prefix
snippet friend
options head
abbr    friend prefix
  friend ${1:TARGET}



#### decltype
snippet decltype
abbr decltype operator
  decltype( ${1:TARGET})${0}


#### typeid
snippet typeid
abbr    typeid operator
  typeid( ${1:TARGET})${0}


#### template
snippet template
abbr template<...>
  template < ${1:TARGET}> ${0}


#### constexpr
snippet constexpr
alias   conex
abbr constexpr prefix
  constexpr ${1:TARGET}


#### C++ functions

snippet function_cpp
alias   funcdcpp
abbr    C++ function declaration template 
  ${1:#:type}${2:#:function_name}( ${3:#:args}) ${4:#:declaration}${5:\{ \$\{6\} \}}


snippet function_cpp_auto
alias   funcdcppauto
abbr    back end return type declaration
  ${1:#:prefix}auto ${2:#:function_name}( ${3:#:args}) ${4:#:declaration}->${5:#:return_type}
  ${6:\{ \$\{7\} \}}



#### public specifier
snippet public
alias   pub
abbr    public specifier
  public${1:\:} ${2:TARGET}


#### protected specifier
snippet protected
alias   prot
abbr    protected specifier
  protected${1:\:} ${2:TARGET}


#### private specifier
snippet private
alias   pri
abbr    private specifier
  private${1:\:} ${2:TARGET}


#### virtual specifier
snippet virtual
alias   vir
abbr    virtual specifier
  virtual ${1:TARGET}


#### operator functon
snippet operator
abbr    operator function
  ${1:#:retrun_value}operator${2:#:operator}( ${3:#:args}) ${4:#:declaration}${5:\{ \$\{6\} \}}


#### constructor
snippet constructor
abbr     constructor function
  ${1:explicit}${2:#:(ClassName ::) Name}( ${3:#:args}) ${4:#:(: initialize parameter)}${5:\{ \$\{6\} \}}

#### destructor
snippet destructor
abbr    destructor function
  ${1:#:ClassName ::}~${2:#:Name}( ${3:#:args}) ${4:\{ \$\{5\} \}}



#### explicit specifier
snippet explicit
alias   expl
abbr    explicit specifier
  explicit ${1:TARGET}



#### new operator
snippet new
abbr    new operator
  new ${1:TARGET}${0}

#### delete operator
snippet delete
alias   del
abbr    delete operator
  delete ${1:TARGET}${0}


#### delete[] operator
snippet delete[]
alias   del[]
abbr    delete[] operator
  delete[] ${1:TARGET}${0}


#### using specifier
snippet using
abbr    using specifier
  using ${1:TARGET}


#### typename
snippet typename
alias   tn
abbr typename prefix
  typename ${1:TARGET}${0}



#### default modifier
delete default

snippet default
abbr default modifier
  default ${0}




#### class
snippet class
abbr    class prefix
  class ${1:#:class}${2:\{ \$\{3\} \};}${0}




#### namespace implementation
snippet namespace
alias   ns, name
options head
  namespace ${1:#:Name} ${2:\{ \$\{3\} \}}





#### range based for
snippet for_range
options head
abbr    range based for template
  for(${1:#:Type}${2:#:value}: ${3:#:container}) ${4:\{ \$\{5\} \}}





#### :: type
snippet ::type
abbr    C++11 type_traits return value
  :: type${0}


#### ::value
snippet ::value
abbr    C++11 type_traits return value
  :: value${0}


#### ::iterator
snippet ::iterator
alias   iterator, iter
abbr    C++ STL iterator
  :: iterator${0}


#### std namespace
snippet std 
abbr    std :: namespace
  std ::${1:TARGET}


#### true_type
snippet true_
abbr    true_type
  true_type${0}

#### false_type
snippet false_
abbr    false_type
  false_type${0}


#### declval
snippet declval
abbr std :: declval meta function
  declval < ${1:TARGET}>()



#### static_assert
snippet static_assert
alias   static_, static_a
abbr    static_assert operator
  static_assert( ${1:#:Conditional}, ${2:TARGET} );



#### Cast ####

#### dynamic_cast
snippet dynamic_cast
alias   dyn_cast, cast_dynamic
abbr    dynamic_cast class operator
  dynamic_cast< ${1:#:Type}>( ${2:TARGET})${0}


#### static_cast
snippet static_cast
alias   sta_cast, cast_static
abbr    static_cast class operator
  static_cast< ${1:#:Type}>( ${2:TARGET})${0}


#### reinterpret_cast
snippet reinterpret_cast
alias   rein_cast, cast_reinterpret
abbr    reinterpret_cast class operator
  reinterpret_cast< ${1:#:Type}>( ${2:TARGET})${0}


#### const_cast
snippet const_cast
alias   con_cast, cast_const
abbr    const_cast class operator
  const_cast< ${1:#:Type}>( ${2:TARGET})${0}



#### std :: conditional
snippet conditional
alias   cond
abbr    std :: conditional<Cond, True, False> :: type
  conditional<
      ${1:#:Cond}
    , ${2:#:TrueType}
    , ${3:#:FalseType}
  > ${4:\:\: type} ${0}
