include c.snip


#### inherit/base statement
snippet :
alias   inherit
  : ${0:#:base_class/function}


#### scope operator
snippet ::
alias   scope
abbr    scope operator
  ${1:#:class/namespace}:: ${2:#:member}${0}

#### namespace / class member
snippet ::member
alias   member
abbr    namespace / class member
options word
  :: ${1:#:member}


#### lambda function
snippet [](
alias   [](), [](){}
abbr    lambda function template
  [ ${1:#:capture}]( ${2:#:args}){ ${3:#:process}}${0}



#### inline prefix
snippet inline
options head
abbr    inline prefix
  inline ${1:#:function}${0}


#### decltype
snippet decltype
abbr decltype operator
  decltype( ${1:#:Type})${0}


#### typeid
snippet typeid
abbr    typeid operator
  typeid( ${1:#:Type})${0}


#### template
snippet template
abbr template<...>
  template < ${1:#:template_arg}> ${0}



#### C++ functions

snippet function_cpp
alias   funcdcpp
abbr    C++ function declaration template 
  ${1:#:type}${2:#:function_name}( ${3:#:args}) ${4:#:declaration}${5:#:process_or_end}


snippet function_cpp_auto
alias   funcdcppauto
abbr    back end return type declaration
  ${1:#:prefix}auto ${2:#:function_name}( ${3:#:args}) ${4:#:declaration}-> 
  ${5:#:return_type} ${6:#:process_or_end}



#### public specifier
snippet public
alias   pub
abbr    public specifier
  public${0}


#### protected specifier
snippet protected
alias   prot
abbr    protected specifier
  protected${0}


#### private specifier
snippet private
alias   pri
abbr    private specifier
  private${0}


#### virtual specifier
snippet virtual
alias   vir
abbr    virtual specifier
  virtual ${0}


#### operator functon
snippet operator
abbr    operator function
  ${1:#:retrun_value} operator${2:#:operator} ( ${3:#:args}) ${4:#:declaration} ${5:#:process_or_end}


#### constructor
snippet constructor
abbr     constructor function
  ${1:#:(ClassName ::) Name}( ${2:#:args}) ${3:#:(: initialize parameter)} ${4:#:process_or_end}

#### destructor
snippet destructor
abbr    destructor function
  ${1:#:ClassName ::} ~${2:#:Name}( ${3:#:args}) ${4:#:process_or_end}



#### explicit specifier
snippet explicit
alias   expl
abbr    explicit specifier
  explicit ${0}



#### new operator
snippet new
abbr    new operator
  new ${1:#:Type}${0}

#### delete operator
snippet delete
alias   del
abbr    delete operator
  delete ${1:#:Type}${0}


#### delete[] operator
snippet delete[]
alias   del[]
abbr    delete[] operator
  delete[] ${1:#:Type}${0}


#### using specifier
snippet using
abbr    using specifier
  using ${0}


#### typename
snippet typename
alias   tn
abbr typename prefix
  typename ${1:#:type}${0}



#### default modifier
delete default

snippet default
abbr default modifier
  default ${0}




#### class
snippet class
abbr    class prefix
  class ${1:#:class}${0}




#### namespace implementation
snippet namespace
alias   ns, name
options head
  namespace ${1:#:Name} ${2:#:member_or_end}





#### range based for
snippet for_range
options head
abbr    range based for template
  for(${1:#:Type}${2:#:value}: ${3:#:container}) ${4:#:process}




#### struct class declaration
snippet struct_decl
alias   structd
abbr    struct class declaration
  struct ${1:#:classname(:_baseclass)}{
    ${2:#:members}
  };${0}




#### class declaration
snippet class_decl
alias   classd
abbr    class declaration
  class ${1:#:classname(:_baseclass)}{
    ${2:#:members}
  };${0}



#### :: type
snippet ::type
alias   type
abbr    C++11 type_traits return value
  :: type${0}


#### ::value
snippet ::value
alias   value
abbr    C++11 type_traits return value
  :: value${0}


#### ::iterator
snippet ::iterator
alias   iterator, iter
abbr    C++ STL iterator
  :: iterator${0}


#### std namespace
snippet std 
abbr    std :: namespace
  std ::${0}


#### true_type
snippet true_
abbr    true_type
  true_type${0}

#### false_type
snippet false_
abbr    false_type
  false_type${0}


#### declval
snippet declval
abbr std :: declval meta function
  declval < ${1:#:Type}>()



#### static_assert
snippet static_assert
alias   static_, static_a
abbr    static_assert operator
  static_assert( ${1:#:Conditional}, ${2:#:Error message} );



#### Cast ####

#### dynamic_cast
snippet dynamic_cast
alias   dyn_cast, cast_dynamic
abbr    dynamic_cast
  dynamic_cast< ${1:#:Type}>( ${2:#:variable})${0}


#### static_cast
snippet static_cast
alias   sta_cast, cast_static
abbr    dynamic_cast
  static_cast< ${1:#:Type}>( ${2:#:variable})${0}


#### reinterpret_cast
snippet reinterpret_cast
alias   sta_cast, cast_static
abbr    dynamic_cast
  reinterpret_cast< ${1:#:Type}>( ${2:#:variable})${0}


#### const_cast
snippet const_cast
alias   con_cast, cast_const
abbr    dynamic_cast
  const_cast< ${1:#:Type}>( ${2:#:variable})${0}



